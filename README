<!-- filepath: /home/oth/Documents/ros_space/o2p5/README.md -->
# Requirements & Installation

Ce projet intègre ROS2, Python, OpenCV et Intel RealSense. Pour le faire fonctionner sur une autre machine, les dépendances suivantes sont nécessaires :

1. **ROS2** (Iron)  
   Installation via les instructions officielles ROS : [https://docs.ros.org/en/iron/Installation.html](https://docs.ros.org/en/iron/Installation.html).

2. **Intel RealSense SDK 2.0**  
   - Installer `librealsense2-dev` et les outils RealSense.  
   - Vérifier la détection du matériel avec `realsense-viewer`.

3. **Dependencies Python**  
   - Python 3  
   - Numpy (`pip install numpy`)  
   - OpenCV (`pip install opencv-python`)  
   - pyrealsense2 (`pip install pyrealsense2`)  
   - cv_bridge (`sudo apt install ros2-iron-cv-bridge`)  

4. **Compilations et exécutions**  
   - Cloner ce dépôt dans votre workspace ROS2.  
   - Depuis la racine du workspace:
     ```
     colcon build
     source install/setup.bash
     ```
   - Lancer un script Python, par exemple :
     ```
     ros2 run tutorial_pkg test_move
     ```

Installez les drivers nécessaires pour interpreter les messages spécifique au pibot (bumper, laser etc.)


###### Modified!!

# Requirements & Installation

Ce projet intègre ROS2, Python, OpenCV et Intel RealSense. Pour le faire fonctionner sur une autre machine, les dépendances suivantes sont nécessaires :

1. **ROS2** (Iron)  
   Installation via les instructions officielles ROS : [https://docs.ros.org/en/iron/Installation.html](https://docs.ros.org/en/iron/Installation.html).

2. **Intel RealSense SDK 2.0**  
   - Installer `librealsense2-dev` et les outils RealSense.  
   - Vérifier la détection du matériel avec `realsense-viewer`.

3. **Dependencies Python**  
   - Python 3  
   - Numpy (`pip install numpy`)  
   - OpenCV (`pip install opencv-python`)  
   - pyrealsense2 (`pip install pyrealsense2`)  
   - cv_bridge (`sudo apt install ros2-iron-cv-bridge`)  

4. **ROS2 Dependencies**  
   - `rclpy` : La bibliothèque client Python de ROS2 pour écrire des nœuds ROS.  
   - `sensor_msgs` : Pour les types de messages comme `Image`, représentant les données d'image pour les sujets ROS.  
   - `std_msgs` : Pour les types de messages standards comme `String` pour publier des messages de détection.  
   - `cv_bridge` : Un package ROS2 pour convertir entre les images OpenCV et les messages d'image ROS.

   Vous pouvez installer les dépendances ROS2 nécessaires avec :
sudo apt install ros-iron-rclpy ros-iron-sensor-msgs ros-iron-std-msgs ros-iron-cv-bridge


5. **Compilations et exécutions**  
- Cloner ce dépôt dans votre workspace ROS2.  
- Depuis la racine du workspace:
  ```
  colcon build
  source install/setup.bash
  ```
- Lancer un script Python, par exemple :
  ```
  ros2 run tutorial_pkg test_move
  ```

6. **Configuration RealSense SDK**  
- Installer `librealsense2-dev` pour interagir avec la caméra RealSense.
  ```
  sudo apt install librealsense2-dev
  ```
- Vérifier la caméra avec l'outil `realsense-viewer`:
  ```
  realsense-viewer
  ```

7. **Drivers pour interpréter les messages spécifiques au robot**  
Installez les drivers nécessaires pour interpréter les messages spécifiques au robot (bumper, laser, etc.).
