#!/usr/bin/python3
import rclpy
from rclpy.node import Node
from sensor_msgs.msg import LaserScan
from sensor_msgs.msg import PointCloud
from geometry_msgs.msg import Point32
import math

rosNode = None

def scan_callback(scanMsg):
    global rosNode
    header_info = scanMsg.header
    obstacles = []
    angle = scanMsg.angle_min
    for aDistance in scanMsg.ranges:
        if 0.01 < aDistance < 0.3:
            aPoint = Point32()
            aPoint.x = float(math.cos(angle) * aDistance)
            aPoint.y = float(math.sin(angle) * aDistance)
            aPoint.z = 0.0
            obstacles.append(aPoint)
        angle += scanMsg.angle_increment

    point_cloud = PointCloud()
    point_cloud.header = header_info
    point_cloud.points = obstacles

    #rosNode.get_logger().info(f"Header: {header_info}, Number of ranges: {len(scanMsg.ranges)}")
    #rosNode.get_logger().info(f" obs({len(obstacles)}) ...{obstacles[10:20]}...")

    rosNode.publisher.publish(point_cloud)

rclpy.init()
rosNode = Node('scan_interpreter')
rosNode.create_subscription(LaserScan, 'scan', scan_callback, 10)
rosNode.publisher = rosNode.create_publisher(PointCloud, 'point_cloud', 10)

rclpy.spin(rosNode)

rosNode.destroy_node()
rclpy.shutdown()
