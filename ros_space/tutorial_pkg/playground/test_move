#!/usr/bin/python3
import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist
from std_msgs.msg import String

print("test_move :: START...")

class ROSTalker:
    def __init__(self, rosNode):
        self._publisher = rosNode.create_publisher(Twist, '/multi/cmd_nav', 10)
        self._timer = rosNode.create_timer(0.5, self.timer_callback)
        self._i = 0

    def timer_callback(self):
        velocity = Twist()
        if self._i == 0:
            # Move forward
            velocity.linear.x = 0.4
        elif self._i == 1:
            # Move backward
            velocity.linear.x = -0.4
        elif self._i == 2:
            # Turn right
            velocity.angular.z = -0.4
        else:
            # Stop
            velocity.linear.x = 0.0
            velocity.angular.z = 0.0
            self._timer.cancel()  # Stop the timer after completing the sequence

        self._publisher.publish(velocity)
        self._i += 1

def infiniteTalk():
    # Initialize ROS node with ROS client
    rclpy.init()
    aNode = Node("avance")
    talker = ROSTalker(aNode)
    # Start infinite loop
    rclpy.spin(aNode)
    # Clean everything and switch the light off
    aNode.destroy_node()
    rclpy.shutdown()

# Execute the function.
if __name__ == "__main__":
    infiniteTalk()
