#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from rclpy.action import ActionClient
from geometry_msgs.msg import Pose
from nav2_msgs.action import NavigateToPose
from std_msgs.msg import String
from kobuki_ros_interfaces.msg import BumperEvent, WheelDropEvent, ButtonEvent, Sound
import tf2_ros
import numpy as np
from nav_msgs.msg import Odometry
from nav_msgs.msg import OccupancyGrid
import math
from visualization_msgs.msg import Marker, MarkerArray

class Nav2Navigator(Node):
    def __init__(self):
        super().__init__('nav2_navigator')

        self.current_goal_handle = None
        self.navigating = False   # Are we currently navigating?
        self.pending_goal = None  # Store the last received goal if we are busy
        self.is_bumped = False
        self.map_data = None
        self.map_resolution = 1.0
        self.map_origin_x = 0.0
        self.map_origin_y = 0.0
        #initialize object counter
        self.object_counter = 0
        self.marker_id = 1000
        #initialize current position
        self.current_position = Pose()
        self.current_angle = 0.0        
        self.detected_zones = set() 

        # Timeout settings (in seconds)
        self.navigation_timeout = 15.0
        self.timeout_timer = None

        # -------------------------
        #  ROS Setup
        # -------------------------
        # Action client to Nav2's NavigateToPose
        self._nav_to_pose_client = ActionClient(self, NavigateToPose, 'navigate_to_pose')

        # Subscribe to a /goal topic carrying a simple Pose (from RRTExplorer or another node)
        self.goal_sub = self.create_subscription(
            Pose, '/goal', self.goal_callback, 10
        )

        # Optional bumper & wheel drop to stop or cancel navigation
        self.bumper_sub = self.create_subscription(
            BumperEvent, '/events/bumper', self.bumper_callback, 10
        )
        self.wheeldrop_sub = self.create_subscription(
            WheelDropEvent, '/events/wheel_drop', self.wheeldrop_callback, 10
        )
        self.button_sub = self.create_subscription(
            ButtonEvent, '/events/button', self.button_callback, 10
        )

        # (Optional) Sound feedback
        self.sound_pub = self.create_publisher(
            Sound, '/commands/sound', 10
        )

        self.object_marker_pub = self.create_publisher(
            Marker, '/visualization_object_markers', 10
        )
        
        self.map_sub = self.create_subscription(
            OccupancyGrid, '/map', self.map_callback, 10)

        self._subToDetection = self.create_subscription(
            String, '/detection',
            self.detection_callback, 10
        )
        
        self._subToOdom = self.create_subscription(
            Odometry, '/odom',
            self.odom_callback, 10
        )

        # TF buffer/listener (if you need to validate or transform the goal)
        self.tf_buffer = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tf_buffer, self)

        self.get_logger().info("Nav2Navigator node initialized.")

    # --------------------------------------------------------------------------
    #   Goal Callback
    # --------------------------------------------------------------------------
    def goal_callback(self, msg: Pose):
        """
        If we're currently navigating to a goal, store this new one as pending.
        Otherwise, send it to Nav2 right away.
        """
        self.get_logger().info(
            f"New goal received: x={msg.position.x:.2f}, y={msg.position.y:.2f}"
        )

        if self.navigating:
            # We already have a goal in progress, so store this as the latest pending goal
            self.get_logger().info(
                "Currently navigating, so saving this new goal as pending."
            )
            self.pending_goal = msg
        else:
            # We are free to navigate immediately
            self.send_goal_to_nav2(msg)

    def send_goal_to_nav2(self, pose_msg: Pose):
        """
        Helper function to send the given Pose to Nav2's NavigateToPose action client.
        Also starts a timeout timer (10s) to abandon the goal if no success in that time.
        """
        goal_msg = NavigateToPose.Goal()
        goal_msg.pose.pose = pose_msg
        goal_msg.pose.header.frame_id = 'map'
        goal_msg.pose.header.stamp = self.get_clock().now().to_msg()

        # Wait for the action server
        self._nav_to_pose_client.wait_for_server()

        self.navigating = True
        self.get_logger().info(
            f"Sending goal to Nav2: x={pose_msg.position.x:.2f}, y={pose_msg.position.y:.2f}"
        )

        # Send the goal
        send_goal_future = self._nav_to_pose_client.send_goal_async(
            goal_msg, feedback_callback=self.feedback_callback
        )
        send_goal_future.add_done_callback(self.goal_response_callback)

        # Start the navigation timeout timer (10s)
        if self.timeout_timer is not None:
            self.timeout_timer.cancel()
        self.timeout_timer = self.create_timer(
            self.navigation_timeout, self.on_navigation_timeout
        )

    # --------------------------------------------------------------------------
    #   Goal Response and Result
    # --------------------------------------------------------------------------
    def goal_response_callback(self, future):
        """
        Called once Nav2 has accepted or rejected the goal.
        """
        goal_handle = future.result()
        if not goal_handle.accepted:
            self.get_logger().warn('Goal rejected by Nav2.')
            self.navigating = False
            self.cancel_timeout_timer()
            # Possibly check if there's a pending goal
            self.check_for_pending_goal()
            return

        self.get_logger().info('Goal accepted by Nav2.')
        self.current_goal_handle = goal_handle
        self._result_future = goal_handle.get_result_async()
        self._result_future.add_done_callback(self.result_callback)

    def result_callback(self, future):
        """
        Called when Nav2 finishes navigating to the goal (success, failure, or canceled).
        """
        result = None
        try:
            result = future.result().result
        except Exception as e:
            self.get_logger().error(f"Exception getting result: {str(e)}")

        if result:
            self.get_logger().info("Goal reached successfully!")
        else:
            self.get_logger().info("Navigation action failed or was canceled.")

        self.navigating = False
        self.current_goal_handle = None
        self.cancel_timeout_timer()

        # Check if there's a newer goal pending
        self.check_for_pending_goal()

    # --------------------------------------------------------------------------
    #   Navigation Timeout
    # --------------------------------------------------------------------------
    def on_navigation_timeout(self):
        """
        If 10 seconds pass without 'Goal reached successfully',
        we cancel the current goal and move on.
        """
        if self.navigating and self.current_goal_handle is not None:
            self.get_logger().warn(
                f"No 'goal reached' within {self.navigation_timeout} s. Canceling current goal..."
            )
            self.current_goal_handle.cancel_goal_async()
        # We won't explicitly set `navigating = False` hereâ€”once it's canceled, the
        # result callback will set that state. But we do remove the timer now.
        self.cancel_timeout_timer()

    def cancel_timeout_timer(self):
        """Helper to stop the navigation timeout timer if active."""
        if self.timeout_timer is not None:
            self.timeout_timer.cancel()
            self.timeout_timer = None

    # --------------------------------------------------------------------------
    #   Pending Goal Logic
    # --------------------------------------------------------------------------
    def check_for_pending_goal(self):
        """
        If there's a pending goal that arrived while we were navigating,
        send it now that we're free.
        """
        if self.pending_goal is not None:
            latest_goal = self.pending_goal
            self.pending_goal = None
            self.get_logger().info("Sending previously pending goal.")
            self.send_goal_to_nav2(latest_goal)

    # --------------------------------------------------------------------------
    #   Feedback
    # --------------------------------------------------------------------------
    def feedback_callback(self, feedback_msg):
        feedback = feedback_msg.feedback
        # x = feedback.current_pose.pose.position.x
        # y = feedback.current_pose.pose.position.y
        # self.get_logger().info(f'Current robot position: x={x:.2f}, y={y:.2f}')

    # --------------------------------------------------------------------------
    #   Bumper, WheelDrop, Button and Detection
    # --------------------------------------------------------------------------
    def bumper_callback(self, msg: BumperEvent):
        """Handle bumper events."""
        if msg.state == BumperEvent.PRESSED:
            self.is_bumped = True
            self.get_logger().info("Bumper pressed!")
            if self.current_goal_handle:
                self.current_goal_handle.cancel_goal_async()
        else:
            self.is_bumped = False

    def wheeldrop_callback(self, msg: WheelDropEvent):
        """Handle wheel drop events."""
        if msg.state == WheelDropEvent.DROPPED:
            self.is_bumped = True
            self.get_logger().info("Wheel dropped!")
            if self.current_goal_handle:
                self.current_goal_handle.cancel_goal_async()
        else:
            self.is_bumped = False

    def button_callback(self, msg: ButtonEvent):
        """Handle button events."""
        if msg.state == ButtonEvent.PRESSED:
            self.get_logger().info(f"Button {msg.button} pressed!")
    def map_callback(self, msg):
        self.map_resolution = msg.info.resolution
        self.map_origin_x = msg.info.origin.position.x
        self.map_origin_y = msg.info.origin.position.y
        self.map_data = np.array(msg.data).reshape(msg.info.height, msg.info.width)
    
    def create_object_marker(self, x, y):
        # Check if this zone has already been detected (within tolerance)
        tolerance = 1  # Define tolerance range (in meters)
        for detected_x, detected_y in self.detected_zones:
            distance = math.sqrt((x - detected_x) ** 2 + (y - detected_y) ** 2)
            if distance < tolerance:  # Si la distance est infÃ©rieure Ã  la tolÃ©rance
                return None, None  # Ne pas crÃ©er un nouveau marqueur
        
        # Mark this zone as detected
        self.detected_zones.add((x, y))

        # CrÃ©er un ID unique pour chaque marker
        marker = Marker()
        marker.header.frame_id = "map"
        marker.id = self.marker_id  # ID unique pour chaque marker
        self.marker_id += 1  # IncrÃ©menter l'ID pour le prochain marker
        marker.type = Marker.SPHERE
        marker.action = Marker.ADD
        marker.pose.position.x = x
        marker.pose.position.y = y
        marker.pose.position.z = 0.0
        marker.scale.x = self.map_resolution
        marker.scale.y = self.map_resolution
        marker.scale.z = self.map_resolution
        marker.color.a = 1.0
        marker.color.r = 1.0
        marker.color.g = 0.0
        marker.color.b = 0.0
        
        # CrÃ©er un marker de texte pour afficher des informations
        text_marker = Marker()
        text_marker.header.frame_id = "map"
        text_marker.id = self.object_counter  # ID unique pour chaque texte aussi
        self.object_counter += 1
        text_marker.type = Marker.TEXT_VIEW_FACING
        text_marker.action = Marker.ADD
        text_marker.pose.position.x = x
        text_marker.pose.position.y = y
        text_marker.pose.position.z = 0.50  # LÃ©gÃ¨rement au-dessus de la sphÃ¨re
        text_marker.scale.z = 0.3  # Taille du texte
        text_marker.color.a = 1.0
        text_marker.color.r = 1.0
        text_marker.color.g = 1.0
        text_marker.color.b = 1.0
        text_marker.text = str(text_marker.id+1)  # ID de l'objet
        
        return marker, text_marker
    def quaternion_to_yaw(self, quat):
        x, y, z, w = quat.x, quat.y, quat.z, quat.w
        # Calculer le yaw (angle autour de l'axe Z)
        siny_cosp = 2.0 * (w * z + x * y)
        cosy_cosp = 1.0 - 2.0 * (y * y + z * z)
        yaw = math.atan2(siny_cosp, cosy_cosp)
        return yaw

    def odom_callback(self, msg):
        # Update the current position of the robot from odometry data
        self.current_position = msg.pose.pose
        quat = self.current_position.orientation
        self.current_angle = self.quaternion_to_yaw(quat)

    def detection_callback(self, msg):
        # Log the detection event
        x, y, distance, direction = msg.data.split(',')
        x = float(x)
        y = float(y)
        distance = float(distance)
        self._logger.info(f'Detection event received at {x} {y} at {distance} meters to the {direction}')
        position = self.current_position.position
        # angle = np.arctan((x-320)/distance)
        angle = self.current_angle
        # Position of object: 
        marker, text_marker = self.create_object_marker(position.x+distance*np.cos(angle), position.y+distance*np.sin(angle))
        if marker and text_marker:  # Only publish if marker is valid
            self.object_marker_pub.publish(marker)
            self.object_marker_pub.publish(text_marker)
            self.sound_pub.publish(Sound(value=Sound.CLEANINGEND))

def main(args=None):
    rclpy.init(args=args)
    node = Nav2Navigator()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()