#!/usr/bin/env python3

import math
import rclpy
from rclpy.node import Node

# For the action interface
from rclpy.action import ActionClient
from nav2_msgs.action import NavigateToPose

# Messages
from geometry_msgs.msg import Pose, PoseStamped
from kobuki_ros_interfaces.msg import BumperEvent, WheelDropEvent, ButtonEvent, Sound

import tf2_ros


class Nav2Navigator(Node):
    """
    A node that listens to a Pose on /goal (in the 'map' frame) 
    and sends it to Nav2's 'navigate_to_pose' action server. 
    It monitors bumper/wheel-drop events to optionally cancel the goal if needed.
    """

    def __init__(self):
        super().__init__('nav2_navigator')

        # -------------------------
        #  Robot / Navigation State
        # -------------------------
        self.current_goal_handle = None
        self.is_bumped = False

        # -------------------------
        #  ROS Setup
        # -------------------------
        # Action client to Nav2's NavigateToPose
        self._nav_to_pose_client = ActionClient(self, NavigateToPose, 'navigate_to_pose')

        # Subscribe to a /goal topic carrying a simple Pose (like from RRTExplorer)
        self.goal_sub = self.create_subscription(
            Pose, '/goal', self.goal_callback, 10
        )

        # Optional bumper & wheel drop to stop or cancel navigation
        self.bumper_sub = self.create_subscription(
            BumperEvent, '/events/bumper', self.bumper_callback, 10
        )
        self.wheeldrop_sub = self.create_subscription(
            WheelDropEvent, '/events/wheel_drop', self.wheeldrop_callback, 10
        )
        self.button_sub = self.create_subscription(
            ButtonEvent, '/events/button', self.button_callback, 10
        )

        # (Optional) Sound feedback
        self.sound_pub = self.create_publisher(
            Sound, '/commands/sound', 10
        )

        # TF buffer/listener (if you need to validate or transform the goal)
        self.tf_buffer = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tf_buffer, self)

        self.get_logger().info("Nav2Navigator node initialized.")

    # --------------------------------------------------------------------------
    #   Goal Callback
    # --------------------------------------------------------------------------
    def goal_callback(self, msg: Pose):
        """
        Received a Pose (in the 'map' frame) as a goal from the RRTExplorer node.
        We convert it to a PoseStamped, then send it to Nav2.
        """
        # Create a PoseStamped from the raw Pose
        goal_msg = PoseStamped()
        goal_msg.header.stamp = self.get_clock().now().to_msg()
        goal_msg.header.frame_id = 'map'   # Make sure RRTExplorer and your TF setup match this frame

        goal_msg.pose = msg

        # Send the goal to Nav2
        self.send_goal_to_nav2(goal_msg)

    def send_goal_to_nav2(self, pose_stamped: PoseStamped):
        """
        Send a NavigateToPose action request to the nav2 stack.
        """
        # If there's an existing goal, we cancel it
        if self.current_goal_handle:
            self.cancel_current_goal()

        # Wait for the action server to be ready
        self.get_logger().info("Waiting for Nav2 'navigate_to_pose' action server...")
        self._nav_to_pose_client.wait_for_server()

        # Build the action goal
        goal_msg = NavigateToPose.Goal()
        goal_msg.pose = pose_stamped

        self.get_logger().info(f"Sending goal to Nav2: ({pose_stamped.pose.position.x:.2f}, "
                               f"{pose_stamped.pose.position.y:.2f})")

        # Send the goal
        send_goal_future = self._nav_to_pose_client.send_goal_async(
            goal_msg,
            feedback_callback=self.feedback_callback
        )
        send_goal_future.add_done_callback(self.goal_response_callback)

    def goal_response_callback(self, future):
        """
        Called once the server has accepted or rejected the goal.
        """
        try:
            goal_handle = future.result()
            if not goal_handle.accepted:
                self.get_logger().warn("Nav2 goal was rejected.")
                self.current_goal_handle = None
                return

            self.current_goal_handle = goal_handle
            self.get_logger().info("Nav2 goal accepted. Executing...")

            # Wait for the result
            result_future = goal_handle.get_result_async()
            result_future.add_done_callback(self.result_callback)

        except Exception as e:
            self.get_logger().error(f"Error in goal_response_callback: {str(e)}")
            self.current_goal_handle = None

    def feedback_callback(self, feedback_msg):
        """
        Nav2 sends periodic feedback about the current path, position, etc.
        """
        feedback = feedback_msg.feedback
        # Example: remaining path distance
        distance_to_goal = feedback.distance_remaining
        self.get_logger().info(f"Nav2 feedback: distance to goal = {distance_to_goal:.2f} m")

    def result_callback(self, future):
        """
        Called when the Nav2 action is complete (succeeded, aborted, or canceled).
        """
        try:
            result = future.result().result
            self.get_logger().info(f"Nav2 result: {result}")
        except Exception as e:
            self.get_logger().error(f"Error in result_callback: {str(e)}")

        self.current_goal_handle = None
        self.get_logger().info("Navigation action completed.")

    def cancel_current_goal(self):
        """
        Cancel any active Nav2 goal.
        """
        if self.current_goal_handle is None:
            return
        cancel_future = self.current_goal_handle.cancel_goal_async()
        cancel_future.add_done_callback(self._cancel_done)

    def _cancel_done(self, future):
        """
        Callback when cancel is done.
        """
        try:
            cancel_response = future.result()
            self.get_logger().info(f"Cancel request response: {cancel_response}")
        except Exception as e:
            self.get_logger().error(f"Error canceling goal: {str(e)}")
        self.current_goal_handle = None

    # --------------------------------------------------------------------------
    #   Bumper / WheelDrop / Button Callbacks
    # --------------------------------------------------------------------------
    def bumper_callback(self, msg: BumperEvent):
        """
        If the bumper is pressed, we can choose to cancel the current goal
        to avoid driving into obstacles.
        """
        if msg.state == BumperEvent.PRESSED:
            self.get_logger().warn("Bumper pressed -> Canceling current Nav2 goal.")
            self.cancel_current_goal()
        else:
            self.get_logger().info("Bumper released. Ready for new goals.")

    def wheeldrop_callback(self, msg: WheelDropEvent):
        """
        If the wheel drops, we stop for safety (cancel goal).
        """
        if msg.state == WheelDropEvent.DROPPED:
            self.get_logger().warn("Wheel dropped -> Canceling current Nav2 goal.")
            self.cancel_current_goal()
        else:
            self.get_logger().info("Wheel restored. Ready for new goals.")

    def button_callback(self, msg: ButtonEvent):
        """
        You could toggle pause/resume or cancel the goal on a button press.
        """
        if msg.state == ButtonEvent.PRESSED:
            self.get_logger().info(f"Button {msg.button} pressed -> Canceling current goal.")
            self.cancel_current_goal()


def main(args=None):
    rclpy.init(args=args)
    node = Nav2Navigator()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
