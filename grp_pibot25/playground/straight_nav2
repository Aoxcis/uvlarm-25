#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from rclpy.action import ActionClient
from geometry_msgs.msg import Pose
from nav2_msgs.action import NavigateToPose
from kobuki_ros_interfaces.msg import BumperEvent, WheelDropEvent, ButtonEvent, Sound
import tf2_ros

class Nav2Navigator(Node):
    def __init__(self):
        super().__init__('nav2_navigator')

        self.current_goal_handle = None
        self.is_bumped = False

        # -------------------------
        #  ROS Setup
        # -------------------------
        # Action client to Nav2's NavigateToPose
        self._nav_to_pose_client = ActionClient(self, NavigateToPose, 'navigate_to_pose')

        # Subscribe to a /goal topic carrying a simple Pose (like from RRTExplorer)
        self.goal_sub = self.create_subscription(
            Pose, '/goal', self.goal_callback, 10
        )

        # Optional bumper & wheel drop to stop or cancel navigation
        self.bumper_sub = self.create_subscription(
            BumperEvent, '/events/bumper', self.bumper_callback, 10
        )
        self.wheeldrop_sub = self.create_subscription(
            WheelDropEvent, '/events/wheel_drop', self.wheeldrop_callback, 10
        )
        self.button_sub = self.create_subscription(
            ButtonEvent, '/events/button', self.button_callback, 10
        )

        # (Optional) Sound feedback
        self.sound_pub = self.create_publisher(
            Sound, '/commands/sound', 10
        )

        # TF buffer/listener (if you need to validate or transform the goal)
        self.tf_buffer = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tf_buffer, self)

        self.get_logger().info("Nav2Navigator node initialized.")

    def goal_callback(self, msg: Pose):
        """Send the received goal to Nav2's NavigateToPose action server."""
        self.get_logger().info(f"New goal received: x={msg.position.x}, y={msg.position.y}")

        goal_msg = NavigateToPose.Goal()
        goal_msg.pose.pose = msg
        goal_msg.pose.header.frame_id = 'map'
        goal_msg.pose.header.stamp = self.get_clock().now().to_msg()

        self._nav_to_pose_client.wait_for_server()

        self.current_goal_handle = self._nav_to_pose_client.send_goal_async(goal_msg, feedback_callback=self.feedback_callback)
        self.current_goal_handle.add_done_callback(self.goal_response_callback)

    def goal_response_callback(self, future):
        goal_handle = future.result()
        if not goal_handle.accepted:
            self.get_logger().info('Goal rejected')
            return

        self.get_logger().info('Goal accepted')
        self.current_goal_handle = goal_handle
        self.current_goal_handle.result().add_done_callback(self.result_callback)

    def feedback_callback(self, feedback_msg):
        feedback = feedback_msg.feedback
        self.get_logger().info(f'Current robot position: {feedback.current_pose.pose.position.x}, {feedback.current_pose.pose.position.y}')

    def result_callback(self, future):
        result = future.result().result
        if result:
            self.get_logger().info('Goal reached')
        else:
            self.get_logger().info('Goal failed')

    def bumper_callback(self, msg: BumperEvent):
        """Handle bumper events."""
        if msg.state == BumperEvent.PRESSED:
            self.is_bumped = True
            self.get_logger().info("Bumper pressed!")
            if self.current_goal_handle:
                self.current_goal_handle.cancel_goal_async()
        else:
            self.is_bumped = False

    def wheeldrop_callback(self, msg: WheelDropEvent):
        """Handle wheel drop events."""
        if msg.state == WheelDropEvent.DROPPED:
            self.is_bumped = True
            self.get_logger().info("Wheel dropped!")
            if self.current_goal_handle:
                self.current_goal_handle.cancel_goal_async()
        else:
            self.is_bumped = False

    def button_callback(self, msg: ButtonEvent):
        """Handle button events."""
        if msg.state == ButtonEvent.PRESSED:
            self.get_logger().info(f"Button {msg.button} pressed!")

def main(args=None):
    rclpy.init(args=args)
    node = Nav2Navigator()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()