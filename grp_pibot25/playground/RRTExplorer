#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
import numpy as np
import math
import random

from nav_msgs.msg import OccupancyGrid
from geometry_msgs.msg import Pose
from visualization_msgs.msg import Marker, MarkerArray

import tf2_ros
from tf2_ros import TransformException
from rclpy.duration import Duration
from collections import deque

class TreeNode:
    def __init__(self, x, y, parent=None):
        self.x = x
        self.y = y
        self.parent = parent

class RRTExplorer(Node):
    def __init__(self):
        super().__init__('rrt_explorer')
        self.map_data = None
        self.map_resolution = 1.0
        self.map_origin_x = 0.0
        self.map_origin_y = 0.0
        self.safety_radius = 10  # Cells around a point for safety

        # The minimum distance (in meters) from the robot to any generated RRT goal
        self.min_goal_distance = 1.0

        # Counter to track consecutive rounds without frontier nodes
        self.no_frontier_count = 0

        # TF buffer/listener
        self.tf_buffer = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tf_buffer, self)

        # Subscriptions and publishers
        self.map_sub = self.create_subscription(
            OccupancyGrid, '/map', self.map_callback, 10
        )

        self.goal_pub = self.create_publisher(Pose, '/goal', 10)
        self.marker_pub = self.create_publisher(MarkerArray, '/visualization_markers', 10)

        # Run RRT periodically
        self.timer_period = 5.0
        self.timer = self.create_timer(self.timer_period, self.explore)

        # We'll store the robot position in map coords (cells)
        self.robot_cell_x = None
        self.robot_cell_y = None

    def map_callback(self, msg):
        self.map_resolution = msg.info.resolution
        self.map_origin_x = msg.info.origin.position.x
        self.map_origin_y = msg.info.origin.position.y
        # Convert map data to 2D array
        self.map_data = np.array(msg.data).reshape(msg.info.height, msg.info.width)

    def explore(self):
        if self.map_data is None:
            self.get_logger().warn("No map data yet.")
            return

        # Get the robot's current (x, y) in map frame
        if not self.update_robot_position():
            return

        # Build RRT from the robot cell position
        start = TreeNode(self.robot_cell_x, self.robot_cell_y)
        tree = [start]
        markers = MarkerArray()

        max_iterations = 200
        step_size = 30

        for _ in range(max_iterations):
            rx, ry = self.sample_free_away_from_robot()
            nearest = self.nearest_node(tree, rx, ry)
            new_node = self.steer(nearest, rx, ry, step_size)

            if self.is_free(new_node.x, new_node.y):
                new_node.parent = nearest
                tree.append(new_node)

                # Marker for visualization
                markers.markers.append(self.create_marker(new_node))

        # Clean previous markers before publishing
        self.clear_markers()
        self.marker_pub.publish(markers)

        # After building the RRT, find frontier nodes (i.e., near unknown)
        frontier_nodes = [node for node in tree if self.near_unknown(node.x, node.y)]

        if not frontier_nodes:
            self.no_frontier_count += 1
            self.get_logger().info(f"No frontier nodes found. Count: {self.no_frontier_count}")
            
            # Publish a random valid node after 3 consecutive failures
            if self.no_frontier_count >= 3:
                self.get_logger().info("Publishing a random valid goal due to repeated failures.")
                rx, ry = self.sample_random_valid_node()
                self.publish_goal(rx, ry)
                self.no_frontier_count = 0  # Reset the counter
            return

        # Reset the counter if frontier nodes are found
        self.no_frontier_count = 0

        # Cluster frontier nodes, pick the largest cluster, and pick a goal in that cluster
        clusters = self.cluster_nodes(frontier_nodes, cluster_radius=5)  # in cells
        if not clusters:
            self.get_logger().info("No valid clusters of frontier nodes found.")
            return

        largest_cluster = max(clusters, key=len)
        self.get_logger().info(f"Found {len(clusters)} frontier clusters. Largest size: {len(largest_cluster)}")

        # For simplicity, we'll pick the average position of the largest cluster as the goal
        avg_x = sum(n.x for n in largest_cluster) / len(largest_cluster)
        avg_y = sum(n.y for n in largest_cluster) / len(largest_cluster)
        goal_x = int(avg_x)
        goal_y = int(avg_y)

        self.publish_goal(goal_x, goal_y)

    def sample_random_valid_node(self):
        """Sample a random valid node within the map."""
        height, width = self.map_data.shape
        while True:
            rx = random.randint(0, width - 1)
            ry = random.randint(0, height - 1)
            if self.is_free(rx, ry):
                return rx, ry

    def clear_markers(self):
        """Remove all existing markers by publishing an empty MarkerArray."""
        clear_array = MarkerArray()
        marker = Marker()
        marker.action = Marker.DELETEALL
        clear_array.markers.append(marker)
        self.marker_pub.publish(clear_array)

    def update_robot_position(self):
        """Update self.robot_cell_x, self.robot_cell_y from TF, returns True if valid."""
        try:
            when = rclpy.time.Time()
            transform_stamped = self.tf_buffer.lookup_transform(
                'map', 'base_link', when, timeout=Duration(seconds=0.5)
            )
        except (TransformException) as ex:
            self.get_logger().warn(f"Could not get transform from map->base_link: {ex}")
            return False

        # Robot position in map (meters)
        robot_x_map = transform_stamped.transform.translation.x
        robot_y_map = transform_stamped.transform.translation.y
        self.get_logger().info(f"Robot (map frame): ({robot_x_map:.2f}, {robot_y_map:.2f})")

        # Convert to cell coords
        cx = int((robot_x_map - self.map_origin_x) / self.map_resolution)
        cy = int((robot_y_map - self.map_origin_y) / self.map_resolution)

        if not self.is_cell_valid(cx, cy) or not self.is_free(cx, cy):
            self.get_logger().warn("Robot cell is invalid/occupied. Using map center.")
            cx = self.map_data.shape[1] // 2
            cy = self.map_data.shape[0] // 2

        self.robot_cell_x = cx
        self.robot_cell_y = cy

        # Store the robot's current orientation
        self.robot_orientation = transform_stamped.transform.rotation

        return True

    def sample_free_away_from_robot(self):
        """Sample a free cell that's at least self.min_goal_distance (in meters) from robot."""
        min_cell_dist = int(self.min_goal_distance / self.map_resolution)

        height, width = self.map_data.shape
        while True:
            rx = random.randint(0, width - 1)
            ry = random.randint(0, height - 1)
            if not self.is_free(rx, ry):
                continue
            # distance in cells
            cell_dist = math.hypot(rx - self.robot_cell_x, ry - self.robot_cell_y)
            if cell_dist >= min_cell_dist:
                return rx, ry

    def steer(self, nearest, rx, ry, step_size=10):
        dx = rx - nearest.x
        dy = ry - nearest.y
        dist = math.hypot(dx, dy)
        if dist < step_size:
            return TreeNode(rx, ry, parent=nearest)

        theta = math.atan2(dy, dx)
        new_x = int(nearest.x + step_size * math.cos(theta))
        new_y = int(nearest.y + step_size * math.sin(theta))
        return TreeNode(new_x, new_y, parent=nearest)

    def is_free(self, x, y):
        """Check if cell is in-bounds, unoccupied, respects safety radius."""
        if not self.is_cell_valid(x, y):
            return False
        # Check safety
        for nx in range(x - self.safety_radius, x + self.safety_radius + 1):
            for ny in range(y - self.safety_radius, y + self.safety_radius + 1):
                if not self.is_cell_valid(nx, ny):
                    return False
                if self.map_data[ny, nx] == 100:
                    return False
        return True

    def is_cell_valid(self, x, y):
        h, w = self.map_data.shape
        return (0 <= x < w and 0 <= y < h)

    def near_unknown(self, x, y):
        """Check if a cell is near unknown (-1)."""
        for nx in range(x - 2, x + 3):
            for ny in range(y - 2, y + 3):
                if self.is_cell_valid(nx, ny):
                    if self.map_data[ny, nx] == -1:
                        return True
        return False

    def publish_goal(self, gx, gy):
        """Convert cell coords -> world coords, publish as a Pose."""
        world_x = self.map_origin_x + gx * self.map_resolution
        world_y = self.map_origin_y + gy * self.map_resolution

        goal_msg = Pose()
        goal_msg.position.x = world_x
        goal_msg.position.y = world_y
        goal_msg.position.z = 0.0

        # Use the robot's current orientation for the goal
        if hasattr(self, 'robot_orientation'):
            goal_msg.orientation = self.robot_orientation
        else:
            goal_msg.orientation.w = 1.0  # Default orientation if not available

        self.goal_pub.publish(goal_msg)
        self.get_logger().info(f"Published goal: ({world_x}, {world_y}) with orientation ({goal_msg.orientation.x}, {goal_msg.orientation.y}, {goal_msg.orientation.z}, {goal_msg.orientation.w})")

    def nearest_node(self, tree, rx, ry):
        """Return the node from 'tree' closest to (rx, ry)."""
        return min(tree, key=lambda node: (node.x - rx)**2 + (node.y - ry)**2)

    def create_marker(self, node: TreeNode):
        marker = Marker()
        marker.header.frame_id = "map"
        marker.type = Marker.SPHERE
        marker.action = Marker.ADD

        marker.pose.position.x = self.map_origin_x + node.x * self.map_resolution
        marker.pose.position.y = self.map_origin_y + node.y * self.map_resolution
        marker.pose.position.z = 0.0

        # 1 cell diameter
        marker.scale.x = self.map_resolution
        marker.scale.y = self.map_resolution
        marker.scale.z = self.map_resolution

        marker.color.a = 1.0
        marker.color.r = 0.0
        marker.color.g = 1.0
        marker.color.b = 0.0

        marker.id = random.randint(0, 1_000_000)
        return marker

    # --------------------------------------------------------------------------
    #   Clustering Frontier Nodes
    # --------------------------------------------------------------------------
    def cluster_nodes(self, nodes, cluster_radius=5):
        """
        Group frontier nodes into clusters using BFS or DFS based on a 
        specified 'cluster_radius' in cell units. 
        Returns a list of clusters, each cluster is a list of TreeNodes.
        """
        clusters = []
        visited = set()

        # Convert each TreeNode into (x, y) for BFS
        node_positions = [(n.x, n.y) for n in nodes]
        pos_to_node = {(n.x, n.y): n for n in nodes}

        for pos in node_positions:
            if pos in visited:
                continue

            # Start a new cluster
            cluster = []
            queue = deque([pos])
            visited.add(pos)

            while queue:
                cx, cy = queue.popleft()
                cluster.append(pos_to_node[(cx, cy)])

                # Explore neighbors within cluster_radius
                # (Just do a small square, or 8-direction BFS).
                for nx in range(cx - cluster_radius, cx + cluster_radius + 1):
                    for ny in range(cy - cluster_radius, cy + cluster_radius + 1):
                        if (nx, ny) in pos_to_node and (nx, ny) not in visited:
                            dist = math.hypot(nx - cx, ny - cy)
                            if dist <= cluster_radius:
                                visited.add((nx, ny))
                                queue.append((nx, ny))

            clusters.append(cluster)

        return clusters

def main(args=None):
    rclpy.init(args=args)
    node = RRTExplorer()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
